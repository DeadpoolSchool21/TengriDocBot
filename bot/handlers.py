# handlers.py

from aiogram import Router, types
from bot.search_engine import search_query
from bot.gigachat_client import gigachat_client  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç!
from bot.memory import conversation_memory
from bot.utils import normalize_text, is_wrong_layout
from bot.humor import get_greeting, get_bot_abilities, get_joke
from bot.get_gigachat_token import gigachat_auth  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω GigaChat

router = Router()
indexed_docs = []

def register_handlers(dp, docs):
    """ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. """
    global indexed_docs
    indexed_docs = docs
    dp.include_router(router)

@router.message()
async def handle_message(message: types.Message):
    """ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. """
    user_text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if is_wrong_layout(user_text):
        await message.answer("üîÑ –ü–æ—Ö–æ–∂–µ, —Ç—ã –∑–∞–±—ã–ª —Å–º–µ–Ω–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥–∫—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
        return

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    normalized_text = normalize_text(user_text)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if normalized_text in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "—Ö–∞–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å"]:
        await message.answer(get_greeting())
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?"
    if "—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å" in normalized_text:
        await message.answer(get_bot_abilities())
        return

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥
    conversation_memory.add_message(user_text, "‚è≥ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ GigaChat
    if not gigachat_auth.access_token:
        gigachat_auth.access_token = gigachat_auth.get_gigachat_token()
        print(f"üîÑ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω GigaChat –≤ handlers.py: {gigachat_auth.access_token}")

    # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
    search_results = search_query(normalized_text, indexed_docs)
    
    if search_results:
        response_text = "\n\n---\n\n".join([f"{doc[2]}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {doc[1]}" for doc in search_results])
        full_prompt = f"–í–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:\n{response_text}\n\n–í–æ–ø—Ä–æ—Å: {user_text}\n–û—Ç–≤–µ—Ç—å –ø–æ–Ω—è—Ç–Ω–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ."
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç —É GigaChat (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            reply = gigachat_client.ask_gigachat(full_prompt)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤!
            conversation_memory.add_message(user_text, reply)
            await message.answer(f"üß† {reply}")
        except Exception as e:
            await message.answer("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat. –ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            print(f"GigaChat Error: {e}")
            await message.answer(response_text)
    else:
        await message.answer("üòï –ù–µ –Ω–∞—à—ë–ª —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –ú–æ–≥—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–∏–π –æ—Ç–≤–µ—Ç?")
