# main.py

import asyncio
import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from aiogram.fsm.storage.memory import MemoryStorage
from bot.handlers import register_handlers
from bot.search_engine import load_links, index_documents
from bot.config import BOT_TOKEN
from bot.knowledge_base import KnowledgeBase
from bot.get_gigachat_token import gigachat_auth  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GigaChat —Ç–æ–∫–µ–Ω

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("bot.log", mode='w'),
        logging.StreamHandler()
    ]
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    exit(1)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ GigaChat
if not gigachat_auth.access_token or gigachat_auth.access_token == "":
    logging.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–∫–µ–Ω–∞! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π...")
    gigachat_auth.access_token = gigachat_auth.get_gigachat_token()

if gigachat_auth.access_token:
    logging.info(f"‚úÖ GigaChat —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {gigachat_auth.access_token}")
else:
    logging.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω GigaChat –Ω–µ –ø–æ–ª—É—á–µ–Ω!")



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
dp = Dispatcher(storage=MemoryStorage())

async def main():
    logging.info("ü§ñ TengriDocBot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –í–∫–ª—é—á–∞–µ–º –º–∞–≥–∏—é!")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
        knowledge_base = KnowledgeBase()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Å—ã–ª–æ–∫ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        links = load_links()
        logging.info(f"üîó –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(links)} —Å—Å—ã–ª–æ–∫")
        
        indexed_docs = index_documents(links)
        logging.info(f"üìö –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ {len(indexed_docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        register_handlers(dp, indexed_docs)
        logging.info("üëå –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(bot)
    
    except Exception as e:
        logging.exception(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logging.exception(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
